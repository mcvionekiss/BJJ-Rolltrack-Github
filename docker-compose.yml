version: '3.8'

# Define networks
networks:
  app-network:
    driver: bridge

# Define volumes for persistent data
volumes:
  static-data:
  media-data:
  nginx-certs:
  nginx-conf:
  frontend-build:  # New volume for frontend build files

services:
  # Backend service with multiple replicas for redundancy
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        - PIPELINE=${PIPELINE:-development}
    restart: unless-stopped
    # Note: For redundancy, you can manually scale with docker-compose up --scale backend=2
    environment:
      - PIPELINE=${PIPELINE:-development}
      - DEBUG=${DEBUG:-False}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-"DJANGO_SECRET_KEY"}
      # RDS connection details
      - DB_NAME=${DB_NAME:-test}
      - DB_USER=${DB_USER:-admin}
      - DB_PASSWORD=${DB_PASSWORD:-your-password}
      - DB_HOST=${DB_HOST:-rds-mysql-bjjrolltrack.cnaa6y844puy.us-east-1.rds.amazonaws.com}
      - DB_PORT=${DB_PORT:-3306}
      # Other environment variables
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS:-http://localhost:3000}
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
      - USE_HTTPS=${USE_HTTPS:-False}
    volumes:
      - static-data:/app/backend/staticfiles
      - media-data:/app/backend/media
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        - REACT_APP_ENV=${REACT_APP_ENV:-development}
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
        - REACT_APP_PUBLIC_URL=${REACT_APP_PUBLIC_URL:-http://localhost:3000}
    environment:
      - REACT_APP_ENV=${REACT_APP_ENV:-development}
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
      - REACT_APP_PUBLIC_URL=${REACT_APP_PUBLIC_URL:-http://localhost:3000}
      - BACKEND_URL=${BACKEND_URL:-http://backend:8000}
    volumes:
      - frontend-build:/app/frontend/build
    depends_on:
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${FRONTEND_PORT:-80}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx service for SSL termination and load balancing
  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    container_name: bjj-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - nginx-certs:/etc/nginx/ssl
      - static-data:/usr/share/nginx/static
      - media-data:/usr/share/nginx/media
      - ./certbot/www:/var/www/certbot  # For Let's Encrypt challenges
      - frontend-build:/usr/share/nginx/html  # Mount frontend build files
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
      - FRONTEND_HOST=${FRONTEND_HOST:-bjj-rolltrack-github_frontend_1}
      - FRONTEND_PORT=${FRONTEND_PORT:-80}
      - BACKEND_HOST=${BACKEND_HOST:-bjj-rolltrack-github_backend_1}
      - BACKEND_PORT=${BACKEND_PORT:-8000}
      - USE_HTTPS=${USE_HTTPS:-false}
      - SSL_CERT_PATH=${SSL_CERT_PATH:-/etc/nginx/ssl/cert.pem}
      - SSL_KEY_PATH=${SSL_KEY_PATH:-/etc/nginx/ssl/key.pem}
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    