# Main nginx configuration with proper structure

# Events section (required by nginx)
events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process
    worker_connections 1024;
    # multi_accept on;
}

http {
    # Define upstream for backend servers (for load balancing)
    upstream backend_servers {
        server backend:8000;
        # Additional backend servers can be added here for horizontal scaling
        # server backend2:8000;
        # server backend3:8000;
    }

    # HTTP server
    server {
        listen 80;
        server_name rolltrackapp.com www.rolltrackapp.com;  # Replace with your domain

        # For Let's Encrypt verification
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all traffic to HTTPS when certificates are available
        location / {
            # Use a more reliable approach to check for HTTPS availability
            # instead of environment variables
            if (-f /etc/nginx/ssl/cert.pem) {
                return 301 https://$host$request_uri;
            }
            
            # If HTTPS is not available, proxy to frontend
            proxy_pass http://frontend:80;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Specific handler for auth endpoints - strip /api prefix
        location /api/auth/ {
            # Rewrite to remove /api prefix before passing to backend
            rewrite ^/api/(.*) /$1 break;
            proxy_pass http://backend:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
        
        # Proxy other API requests to the backend
        location /api/ {
            proxy_pass http://backend:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Serve static files directly
        location /static/ {
            alias /usr/share/nginx/static/;
            expires 1m;
            add_header Cache-Control "public, no-transform";
        }

        # Serve media files directly
        location /media/ {
            alias /usr/share/nginx/media/;
            expires 1m;
            add_header Cache-Control "public, no-transform";
        }
    }

    # HTTPS server - This will silently fail if cert files don't exist,
    # which is better than causing the whole Nginx to fail
    server {
        listen 443 ssl http2;
        server_name rolltrackapp.com www.rolltrackapp.com;  # Replace with your domain

        # SSL configuration - Will fail silently if files don't exist
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # HSTS (optional, but recommended)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Handle Single Page Application routes
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
        
        # Disable caching for HTML to ensure fresh content
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        # Standard proxy headers in case we fall through to the frontend service
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
    
    # Specific handling for static assets with reduced caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        root /usr/share/nginx/html;
        # Reduced caching time to 1 minutes instead of 30 days
        expires 1m;
        add_header Cache-Control "public, max-age=300, must-revalidate";
        # Add timestamp in header for debugging
        add_header X-Asset-Served-Time $date_gmt;
    }

        # Specific handler for auth endpoints - strip /api prefix
        location /api/auth/ {
            # Rewrite to remove /api prefix before passing to backend
            rewrite ^/api/(.*) /$1 break;
            proxy_pass http://backend:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
        
        # Proxy other API requests to the backend
        location /api/ {
            proxy_pass http://backend:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Serve static files with reduced caching
        location /static/ {
            alias /usr/share/nginx/static/;
            expires 1m;
            add_header Cache-Control "public, max-age=300, must-revalidate";
            add_header X-Asset-Served-Time $date_gmt;
        }

        # Serve media files with reduced caching
        location /media/ {
            alias /usr/share/nginx/media/;
            expires 1m;
            add_header Cache-Control "public, max-age=300, must-revalidate";
            add_header X-Asset-Served-Time $date_gmt;
        }
    }
}